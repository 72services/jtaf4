application.version=@project.version@

server.port=${PORT:8484}
# Because the app runs behind a load balancer
server.forward-headers-strategy=native

server.tomcat.max-http-form-post-size=10MB

# Enable GCP secret manager config file import
spring.config.import=sm://

spring.datasource.url=${sm://neon-jtaf4-url}

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${sm://jtaf-mail-user}
spring.mail.password=${sm://jtaf-mail-password}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

spring.mustache.check-template-location=false

# Because it runs on GCP App Engine
management.health.diskspace.enabled=false
management.endpoint.health.show-details=always

# Launch the default browser when starting the application in development mode
vaadin.launch-browser=true
# To improve the performance during development.
# For more information https://vaadin.com/docs/flow/spring/tutorial-spring-configuration.html#special-configuration-parameters
vaadin.whitelisted-packages=com.vaadin,org.vaadin,dev.hilla,ch.jtaf

# For encryption of JWT tokens
# change this parameter in production servers, you can generate a key by running `openssl rand -base64 32` and then passing the
# result by using the parameter `--jwt.auth.secret=` to servlet container
jwt.auth.secret=TdysC+ETveB5y/Oiaug4RFifjsBjnRkL2mXWbAt1GCI=

jtaf.public.address=http://localhost:8484

logging.level.org.atmosphere=warn
